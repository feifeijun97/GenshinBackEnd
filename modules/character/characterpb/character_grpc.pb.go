// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package characterpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CharacterListServiceClient is the client API for CharacterListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CharacterListServiceClient interface {
	CharacterList(ctx context.Context, in *CharacterListRequest, opts ...grpc.CallOption) (*CharacterListResponse, error)
}

type characterListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCharacterListServiceClient(cc grpc.ClientConnInterface) CharacterListServiceClient {
	return &characterListServiceClient{cc}
}

func (c *characterListServiceClient) CharacterList(ctx context.Context, in *CharacterListRequest, opts ...grpc.CallOption) (*CharacterListResponse, error) {
	out := new(CharacterListResponse)
	err := c.cc.Invoke(ctx, "/character.CharacterListService/CharacterList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CharacterListServiceServer is the server API for CharacterListService service.
// All implementations must embed UnimplementedCharacterListServiceServer
// for forward compatibility
type CharacterListServiceServer interface {
	CharacterList(context.Context, *CharacterListRequest) (*CharacterListResponse, error)
	mustEmbedUnimplementedCharacterListServiceServer()
}

// UnimplementedCharacterListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCharacterListServiceServer struct {
}

func (UnimplementedCharacterListServiceServer) CharacterList(context.Context, *CharacterListRequest) (*CharacterListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CharacterList not implemented")
}
func (UnimplementedCharacterListServiceServer) mustEmbedUnimplementedCharacterListServiceServer() {}

// UnsafeCharacterListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CharacterListServiceServer will
// result in compilation errors.
type UnsafeCharacterListServiceServer interface {
	mustEmbedUnimplementedCharacterListServiceServer()
}

func RegisterCharacterListServiceServer(s grpc.ServiceRegistrar, srv CharacterListServiceServer) {
	s.RegisterService(&CharacterListService_ServiceDesc, srv)
}

func _CharacterListService_CharacterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterListServiceServer).CharacterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/character.CharacterListService/CharacterList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterListServiceServer).CharacterList(ctx, req.(*CharacterListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CharacterListService_ServiceDesc is the grpc.ServiceDesc for CharacterListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CharacterListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "character.CharacterListService",
	HandlerType: (*CharacterListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CharacterList",
			Handler:    _CharacterListService_CharacterList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modules/character/characterpb/character.proto",
}
